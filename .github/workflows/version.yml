name: Update vrsion

on:
  push:
    branches: 
      - main
    tags-ignore:
      - '*'             # do not run on pushed tags

permissions:
  contents: write

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:
      - name: Get merged PR
        id: get-merged-pull-request
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ secrets.PAT_TOKEN }}

      - name: Get semver level from PR labels
        id: release-label
        # Continue only with pull request (title not null)
        if: ${{ steps.get-merged-pull-request.outputs.title != null }}
        uses: actions-ecosystem/action-release-label@v1
        with:
          label_prefix: ''
          # Labels:
          #   - major
          #   - minor
          #   - patch
          labels: ${{ steps.get-merged-pull-request.outputs.labels }}

      - name: Checkout code
        # Continue only with semver level from pull request
        if: ${{ steps.release-label.outputs.level != null }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      # get latest semver tag
      - name: Get current version
        id: get-latest-tag
        # Continue only with semver level from pull request
        if: ${{ steps.release-label.outputs.level != null }}
        uses: actions-ecosystem/action-get-latest-tag@v1
        with:
          # Generate initial semver tag if none is found (v0.0.0)
          with_initial_version: true
          initial_version: 'v0.0.0'
          # Get only semver tag (with prefix 'v'')
          semver_only: true

      # bump semver tag
      - name: Get new version 
        id: bump-semver
        uses: actions-ecosystem/action-bump-semver@v1
        # Continue only with semver level target from pull request
        if: ${{ steps.release-label.outputs.level != null }}
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: ${{ steps.release-label.outputs.level }}

      - name: Convert SemVer to Microsoft version format
        id: ms-version
        if: ${{ steps.bump-semver.outputs.new_version != null }}
        shell: bash
        run: echo "new_version=${{ steps.bump-semver.outputs.new_version }}.0" >> GITHUB_OUTPUT

      - name: Import GPG key
        id: import-gpg
        # Continue only with new semver tag (skip if no semver bump)
        if: ${{ steps.ms-version.outputs.new_version != null }}
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_push_gpgsign: true

      - name: Setup git credentials
        # Continue only with new semver tag and gpg key
        if: ${{ steps.ms-version.outputs.new_version != null && steps.import-gpg.outputs.keyid != null }}
        shell: bash
        run: |
          git config user.email "${{ secrets.USER_EMAIL }}"
          git config user.name "${{ secrets.USER_NAME }}"

      - name: Create version branch
        # Continue only with new semver tag and gpg key
        if: ${{ steps.ms-version.outputs.new_version != null && steps.import-gpg.outputs.keyid != null }}
        shell: bash
        run: git checkout -b version/${{ steps.ms-version.outputs.new_version }}          

      - name: Update/Create version file
        # Continue only with new semver tag and gpg key
        if: ${{ steps.ms-version.outputs.new_version != null && steps.import-gpg.outputs.keyid != null }}
        shell: bash
        run: echo "${{ steps.ms-version.outputs.new_version }}" > version

      # Update manifest files
      # TODO

      - name: Stage all files
        # Continue only with new semver tag and gpg key
        if: ${{ steps.ms-version.outputs.new_version != null && steps.import-gpg.outputs.keyid != null }}
        shell: bash
        run: git add .

      - name: Commit all files
        # Continue only with new semver tag and gpg key
        if: ${{ steps.ms-version.outputs.new_version != null && steps.import-gpg.outputs.keyid != null }}
        shell: bash
        run: git commit -S -m "Version files ${{ steps.ms-version.outputs.new_version }}"

      - name: Push branch and commtis
        # Continue only with new semver tag and gpg key
        if: ${{ steps.ms-version.outputs.new_version != null && steps.import-gpg.outputs.keyid != null }}
        shell: bash
        run: git push -u origin version

      - name: Create Pull Request
        env:
          # No permissions?
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Continue only with new semver tag and gpg key
        if: ${{ steps.ms-version.outputs.new_version != null && steps.import-gpg.outputs.keyid != null }}
        run: gh pr create \
            --base main \
            --head version \
            --title "Version files ${{ steps.ms-version.outputs.new_version }}" \
            --body "Bump version in manifest files and in version file to ${{ steps.ms-version.outputs.new_version }}"
            
      - name: Merge Pull Request
        env:
          # No permissions?
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Continue only with new semver tag and gpg key
        if: ${{ steps.ms-version.outputs.new_version != null && steps.import-gpg.outputs.keyid != null }}
        run: gh pr merge version/${{ steps.ms-version.outputs.new_version }} --merge --delete-branch

      - name: Create new version tag
        # Continue only with new semver tag and gpg key
        if: ${{ steps.ms-version.outputs.new_version != null && steps.import-gpg.outputs.keyid != null }}
        shell: bash
        run: |
          tag=${{ steps.ms-version.outputs.new_version }}
          keyid=${{ steps.import-gpg.outputs.keyid }}
          git tag -u ${keyid} "${tag}" -m "Release ${tag}"

      - name: Push tag
        # Continue only with new semver tag and gpg key
        if: ${{ steps.ms-version.outputs.new_version != null && steps.import-gpg.outputs.keyid != null }}
        shell: bash
        run: |
          tag=${{ steps.ms-version.outputs.new_version }}
          git push origin "${tag}"
