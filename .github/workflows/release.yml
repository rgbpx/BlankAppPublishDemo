name: Release

on:
  pull_request:
    types: closed
    branches: main

permissions:
  contents: write

jobs:
  github-release:
    runs-on: ubuntu-latest

    # Only handle merged pull request (already handled by the guards in generate tag action)
    # if: github.event.pull_request.merged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate SemVer tag
        id: gen-tag
        uses: K-Phoen/semver-release-action@master
        with:
          release_branch: main
          release_strategy: none
          tag_format: "v%major%.%minor%.%patch%"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if git tag already exists
        run: git rev-parse "refs/tags/${{ steps.gen-tag.outputs.tag }}" && exit 1 || exit 0

      - name: Set up Git user
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Add git tag
        run: git tag -a ${{ steps.gen-tag.outputs.tag }} -m "Release ${{ steps.gen-tag.outputs.tag }}"

      - name: Push git tag
        run: git push origin ${{ steps.gen-tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # remove
      # - name: Print SemVer tag
      #   run: echo "${{ steps.gen_tag.outputs.tag }}"

      # - name: Checkout repository
      #   uses: actions/checkout@v4

      # - name: Publish GitHub release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     tag_name: ${{ steps.gen_tag.outputs.tag }}
      #     generate_release_notes: true
      #     # files: ./artifacts/**/${{ github.event.repository.name }}-*.zip
      #     # fail_on_unmatched_files: true
      #     make_latest: true
      #     prerelease: false
      #     draft: false

      # - uses: ncipollo/release-action@v1
      #   with:
      #     tag: ${{ steps.gen_tag.outputs.tag }}
      #     # Force update
      #     allowUpdates: true
      #     # Panic on artifact errors
      #     artifactErrorsFailBuild: true
      #     # Generate GitHub automatic release notes
      #     generateReleaseNotes: true
      #     makeLatest: true
      #     # Supply artifacts
      #     # artifacts: "release.tar.gz,foo/*.txt"
      #     # artifactContentType:
      #     # replacesArtifacts: true
